<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>Dougs Doings</title>
        <description>Dougs Doings - Doug Edey</description>
        <link>http://dougedey.github.io</link>
        <link>http://dougedey.github.io</link>
        <lastBuildDate>2014-09-01T20:58:00-04:00</lastBuildDate>
        <pubDate>2014-09-01T20:58:00-04:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Web Based Mash Profiles</title>
                <description>&lt;p&gt;So I have spent some time improving &lt;strong&gt;Mash Profiles&lt;/strong&gt; in &lt;a href=&quot;http://dougedey.github.io/SB_Elsinore_Server/&quot;&gt;StrangeBrew Elsinore&lt;/a&gt;, you can now do edits, re-orders, deletes, all from the Web interface. And since &lt;a href=&quot;http://github.com/dougedey/StrangeBrewQT&quot;&gt;StrangeBrew QT&lt;/a&gt; is dead for me now (too much hassle to support multiple platforms), I’ve been integrating support with &lt;a href=&quot;http://github.com/dougedey/StrangeBrew&quot;&gt;StrangeBrew Java&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;this-is-still-a-test-feature&quot;&gt;This is STILL A TEST Feature&lt;/h1&gt;

&lt;p&gt;If you see an issue, please raise a bug with as much information as possible. One line “This doesn’t work” won’t help me to fix it. Check the logs, this feature has lots of WARNING output (rather than info) until it’s been tested well enough to be part of the main branch.&lt;/p&gt;

&lt;h3 id=&quot;what-is-a-mash-profile&quot;&gt;What is a Mash Profile?&lt;/h3&gt;

&lt;p&gt;I know I’m probably not using the right phrase, but I figured it was catchy enough to refer to, and it gets the intent of the feature across.&lt;/p&gt;

&lt;p&gt;A Mash Profile is a series of Mash Steps, many Mash Steps equal one Mash Profile.&lt;/p&gt;

&lt;p&gt;In Elsinore, you can have a mash profile for each PID you have setup.&lt;/p&gt;

&lt;h3 id=&quot;ok-what-does-a-mash-profile-allow-me-to-do&quot;&gt;OK, what does a Mash Profile allow me to do?&lt;/h3&gt;

&lt;p&gt;The profile allows you to setup mash steps in advance, with target start temperatures, duration, and names, Elsinore then has a background thread for each Mash Profile that has been setup.&lt;/p&gt;

&lt;p&gt;What Elsinore does is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Checks to see if there’s an active mash step, if there’s not it doesn’t do anything, simple&lt;/li&gt;
  &lt;li&gt;Sets the target PID Temperature to that of the mash profile&lt;/li&gt;
  &lt;li&gt;Checks to see if the current temperature on the profiles PID to see if it’s in range of the target profile (currently this is hard set to +/-2F, but this is next on my list to make flexible)&lt;/li&gt;
  &lt;li&gt;If it’s within the target range, it will then activate the mash step and set the start time, whilst at the same time setting the target end time&lt;/li&gt;
  &lt;li&gt;If the end time has been hit, or surpassed, the actual end time is recorded (up to 10s difference)&lt;/li&gt;
  &lt;li&gt;If there’s another mash step, this becomes the active step&lt;/li&gt;
  &lt;li&gt;Goto (1)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;sweet-its-like-a-set-and-forget-thing&quot;&gt;Sweet, it’s like a set and forget thing!&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;No&lt;/strong&gt;, seriously it’s not, you need to monitor everything closesly, as I said at the beginning, I don’t use this feature (at the moment) so it’s difficult for me to detect any issues.&lt;/p&gt;

&lt;p&gt;Also, whilst Elsinore does set the Target Temperature, it does NOT activate the element by itself. If a PID is already on manual, it will not move it to Auto, or Off. I don’t want to active an element when someone hasn’t put their water in, or something isn’t right!&lt;/p&gt;

&lt;p&gt;I do not recommend leaving Elsinore to run by itself whilst you go out of the house, there’s lots of things that can go wrong. Propane leaks, SSRs shorting out, fires, bad bad bad things.&lt;/p&gt;

&lt;h3 id=&quot;ok-i-get-it-i-think-i-want-to-use-this&quot;&gt;OK, I get it, I think I want to use this.&lt;/h3&gt;

&lt;p&gt;You no longer need a desktop StrangeBrew application! It does help, you can use StrangeBrew Java, go to Options -&amp;gt; Preferences -&amp;gt; Brewer. And add the Elsinore location, make sure you include the port! For me it’s &lt;code&gt;http://brewery:8080&lt;/code&gt; Then, go to the Mash Panel, setup your mash and click the “Send &amp;gt;” button to send it to Elsinore, as with StrangeBrew QT, you can select which PID you want to use.&lt;/p&gt;

&lt;p&gt;You’ll get relevant messages for any issues that StrangeBrew finds when trying to update the mash Profile, and then a message for the profile being sent&lt;/p&gt;

&lt;p&gt;You will see a prompt to select the relevant PID that you want to acivate the mash profile for. &lt;/p&gt;

&lt;p&gt;If there’s a profile already active, you can override it!&lt;/p&gt;

&lt;p&gt;These images are from StrangeBrew QT, but they are similar/the same for StrangeBrew Java.
&lt;img src=&quot;https://raw.githubusercontent.com/DougEdey/dougedey.github.io/master/assets/images/mash_profiles/elsinore_on.png&quot; alt=&quot;Elsinore on&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/DougEdey/dougedey.github.io/master/assets/images/mash_profiles/SB_Mash.png&quot; alt=&quot;Elsinore Support&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/DougEdey/dougedey.github.io/master/assets/images/mash_profiles/to_elsinore.png&quot; alt=&quot;Elsinore Sent&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;hold-on-you-said-i-could-do-it-from-the-web-interface&quot;&gt;Hold on, you said I could do it from the Web Interface…&lt;/h3&gt;

&lt;p&gt;Yup, I did, here’s how you do it.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make sure the UI is unlocked.&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/DougEdey/dougedey.github.io/master/assets/images/mash_edit/locked_screen.png&quot; alt=&quot;Elsinore Locked&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/DougEdey/dougedey.github.io/master/assets/images/mash_edit/edit_nomash.png&quot; alt=&quot;Elsinore Unlocked&quot; /&gt;  &lt;/li&gt;
  &lt;li&gt;Click the “Add” button for the PID you want to add a mash step to.&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/DougEdey/dougedey.github.io/master/assets/images/mash_edit/add_new_mash_step.png&quot; alt=&quot;Add Step&quot; /&gt;&lt;br /&gt;
The Boxes have text in them to tell you what’s expected from each box.&lt;br /&gt;
“Temp” is the target temperature for the mash step.&lt;br /&gt;
“Unit”, which defaults to your system temperature Unit.&lt;br /&gt;
“Method”/”Type” these are used so you know what’s going on (StrangeBrew Java adds them in automatically).&lt;br /&gt;
“Duration” is how long to hold the temperature for before moving onto the next mash step.  &lt;/li&gt;
  &lt;li&gt;Then hit the gray/grey “Add” button to add the step, repeat as much as you want, then hit “Cancel” to stop adding mash steps.  &lt;/li&gt;
  &lt;li&gt;You can reorder the mash steps by clicking and dragging the steps to reorder them.&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/DougEdey/dougedey.github.io/master/assets/images/mash_edit/reordering.png&quot; alt=&quot;Add Step&quot; /&gt;  &lt;/li&gt;
  &lt;li&gt;You can also delete the mash steps by dragging them to the “delete” button (it’ll change when you drag it)&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/DougEdey/dougedey.github.io/master/assets/images/mash_edit/delete_mashstep.png&quot; alt=&quot;Add Step&quot; /&gt;  &lt;/li&gt;
  &lt;li&gt;When you’re done adding mash steps and you’re happy, you’ll need to activate “Auto” mode for the PID with the mash profile, this is a safety feature. No I will not change it.  &lt;/li&gt;
  &lt;li&gt;When the PID is in Auto mode, press “Activate” on the mash profile table to activate it.  &lt;/li&gt;
  &lt;li&gt;You can lock the UI when you’re done editing, the mash profile will stay visible.&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/DougEdey/dougedey.github.io/master/assets/images/mash_edit/edit_nomash.png&quot; alt=&quot;Elsinore Unlocked&quot; /&gt;  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;its-sent-what-next&quot;&gt;It’s Sent! What next?&lt;/h3&gt;

&lt;p&gt;In the Web interface, the relevant PID will show a table of the mash steps, by default none are activated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/DougEdey/dougedey.github.io/master/assets/images/mash_profiles/mashstep_activate.png&quot; alt=&quot;Mashstep View&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So you’ll need to click the “Activate” button when you’re setup to go. Then press “Auto” on the PID to activate the element.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/DougEdey/dougedey.github.io/master/assets/images/mash_profiles/mashstep_enabled.png&quot; alt=&quot;Mashstep Active&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the PID temperature is within the target range, +/-2F by default, the timer will start&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/DougEdey/dougedey.github.io/master/assets/images/mash_profiles/timersmash.png&quot; alt=&quot;Mashstep Timer&quot; /&gt;&lt;/p&gt;
</description>
                <link>http://dougedey.github.io/elsinore/mash/instructions/2014/09/01/Elsinore-Mash-Edits</link>
                <guid>http://dougedey.github.io/elsinore/mash/instructions/2014/09/01/Elsinore-Mash-Edits</guid>
                <pubDate>2014-09-01T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Required Hardware</title>
                <description>&lt;h3 id=&quot;the-list&quot;&gt;The list!&lt;/h3&gt;

&lt;p&gt;To begin with, I must state: Be careful when doing anything, you’re going to be turning electrcity into heat, there will invariably be some bare wires around whilst you’re doing things, these may kill you.&lt;/p&gt;

&lt;p&gt;You want to have a GFCI circuit for anything that’s going to be around water, either with a GFCI breaker on your Fuse Panel, or a GFCI cable for the mains current.&lt;/p&gt;

&lt;h3 id=&quot;the-list-really&quot;&gt;The List! (Really)&lt;/h3&gt;

&lt;p&gt;You can break down the system into various components, the controller itself, the temperature probes, the volume sensors, the heating elements, etc…&lt;/p&gt;

&lt;h2 id=&quot;the-controller&quot;&gt;The Controller&lt;/h2&gt;

&lt;p&gt;You’ll need a &lt;a href=&quot;http://www.raspberrypi.org/&quot;&gt;Raspberry Pi&lt;/a&gt; or a &lt;a href=&quot;http://beagleboard.org/black&quot;&gt;BeagleBone Black&lt;/a&gt; these are both Linux based (by default) systems that have GPIO Output. &lt;/p&gt;

&lt;p&gt;You’ll need to install an Operating System, I personally use Ubuntu, and the guides have been written with Ubuntu in mind. But anything with a One Wire module will work (see the next section).&lt;/p&gt;

&lt;h2 id=&quot;one-wire&quot;&gt;One Wire&lt;/h2&gt;

&lt;p&gt;One wire is a system that allows multiple devices to use a single pin, and they’re 64 bit addressed so you don’t need to put them in any physical order.&lt;/p&gt;

&lt;p&gt;For this you need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A 4k7 Ohm resistor&lt;/li&gt;
  &lt;li&gt;DS18B20 (or any compatible temperature sensor)&lt;/li&gt;
  &lt;li&gt;Some wires&lt;/li&gt;
  &lt;li&gt;XLR jacks and sockets (optional, but it makes it easier to move around and change)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(I’ll add more information in the future, but Adafruit have a great &lt;a href=&quot;https://learn.adafruit.com/adafruits-raspberry-pi-lesson-11-ds18b20-temperature-sensing/overview&quot;&gt;guide&lt;/a&gt; for getting started.&lt;/p&gt;

&lt;p&gt;Make sure you get waterproof temperature sensors to go in the kettle, you can use the Electric Breweries guides for this, just replace the PID temperature probes with the One Wire ones.&lt;/p&gt;

&lt;h2 id=&quot;the-kettleselements&quot;&gt;The Kettles/Elements&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://theelectricbrewery.com/&quot;&gt;The Electric Brewery&lt;/a&gt; has incredibly indepth guides for all this stuff, I recommend you use their guides (and their kits if you want to make things easier). But don’t get the PIDs. Elsinore replaces all the PIDs for you&lt;/p&gt;

&lt;h2 id=&quot;special-instructions-for-elsinore&quot;&gt;Special instructions for Elsinore&lt;/h2&gt;

&lt;p&gt;You don’t need LEDs (though they’re a good idea on the hot side so you know when the elements are live).
You should have physical overrides, such as a switch on the GPIO side of the SSRs, just a switch to open the circuit so they turn off.&lt;/p&gt;

</description>
                <link>http://dougedey.github.io/elsinore/instructions/safety/hardware/instructions/setup/shopping/2014/08/14/Components</link>
                <guid>http://dougedey.github.io/elsinore/instructions/safety/hardware/instructions/setup/shopping/2014/08/14/Components</guid>
                <pubDate>2014-08-14T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>StrangeBrew Elsinore</title>
                <description>
&lt;h1 id=&quot;strangebrew-elsinore-server&quot;&gt;Strangebrew Elsinore Server&lt;/h1&gt;

&lt;p&gt;Java Server for Strangebrew Elsinore&lt;/p&gt;

&lt;p&gt;The purpose of this project is to create a Java application that can run on small systems such as the RaspberryPi and the Beaglebone series&lt;/p&gt;

&lt;p&gt;Since these systems run on Linux, that is a requirement to using this.&lt;/p&gt;

&lt;p&gt;The system is based off the Dallas One Wire protocol for the temperature probes (expanding to analogue inputs too), and Straightforward GPIO outputs for SSR control&lt;/p&gt;

&lt;h1 id=&quot;setup-instructions&quot;&gt;Setup Instructions&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;extras/BeagleboneBlackSetup.md&quot;&gt;Beaglebone Black&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;extras/RaspberryPiSetup.md&quot;&gt;RaspberryPi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above instructions will tell you how to setup your systems for Elsinore&lt;/p&gt;

&lt;h1 id=&quot;startup-instructions&quot;&gt;Startup Instructions&lt;/h1&gt;

&lt;p&gt;Clone this repository:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone https://github.com/DougEdey/SB_Elsinore_Server&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Move to the checked out Directory:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd SB_Elsinore_Server&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./launch.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Wait, what happened to the old instructions? Well I found that people weren’t following them well. So I rewrote the UI, you can now setup everything (almost) from the UI.&lt;/p&gt;

&lt;p&gt;If you have a DS2450 (or don’t want to use Analogue inputs for reading the volume, BBB is 1.7V so not very good for reading the analogue inputs. You will see a request for OWFS, please use OWFS if you can, it’s better in general.&lt;/p&gt;

&lt;p&gt;```
./launch.sh 
Starting Elsinore as elsinore
[sudo] password for elsinore: 
May 17, 2014 8:29:23 PM com.sb.elsinore.LaunchControl main
INFO: Running Brewery Controller.
CFG IS NULL
DOC IS NULL
Detected a non temp probe.20-00000008dc9e
Do you want to switch to OWFS? [y/N]
y
Creating the OWFS configuration.
What is the OWFS server host? (Defaults to localhost)&lt;/p&gt;

&lt;p&gt;What is the OWFS server port? (Defaults to 4304)&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Then you can use the web UI.&lt;/p&gt;

&lt;p&gt;The standard view you’ll see at the start is an un-named display, such as:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/61lm1VI.png&quot; alt=&quot;Initial Setup View&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The probe “names” are their addresses, double clicking them allows you to set them up
* You can set just the name (which will leave it as a temperature probe)
* A GPIO pin (which will set it up as a PID controller)
* And if you use a GPIO Pin you can set an Aux pin at the same time, allowing you to use an auxilliary ouput.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/FSAxuYB.png&quot; alt=&quot;Setup Probe&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also setup the volume reading from the web UI, double clicking on the volume box will show you the input.
* You can set the Analogue input PIN (for BBB and RPi), but these are normally voltage limited
* Or you can set the One Wire address (for a DS2450, which is what I use) and the offset for the input which will give you up to 5V.
* You can set the Volume Unit (this doesn’t matter since there’s no conversion between values at the moment)
* Adding a volume point will add a new data point to the system. When you have three or more the system will be able to calculate the volume.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/9pYNdQf.png&quot; alt=&quot;Setup Volume&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;raspberrypi-or-beagleboard&quot;&gt;RaspberryPi or Beagleboard?&lt;/h1&gt;

&lt;p&gt;The BeagleBoard Black does have a big advantage over the RPi, it has onboard analogue inputs, but these are 1.8V.&lt;/p&gt;

&lt;p&gt;The RaspberryPi works fine with the existing software, the only thing you need to do differently is naming the GPIO Pinouts.&lt;/p&gt;

&lt;h1 id=&quot;one-wire--owfs&quot;&gt;One Wire &amp;amp; OWFS&lt;/h1&gt;
&lt;p&gt;One Wire is fantastic (in my opinion) each sensor or device has a full 64 bit address, and you don’t have to worry about the order and you can chain them!&lt;/p&gt;

&lt;p&gt;One Wire devices can be chained, with only one Pullup resistor before the first connection to a device. I currently have 4 Temperature probes on my circuit, and a ADC, connected using XLR jacks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://owfs.org/&quot;&gt;OWFS&lt;/a&gt; is a much better One Wire Implementation, it is highly recommended to install it, and it is REQUIRED if you use One Wire based Analog inputs (like the DS2450&lt;/p&gt;

&lt;p&gt;Install it using your standard package manager, then you need to set a mountpoint up (I use /mnt/1wire) and set &lt;/p&gt;

&lt;p&gt;&lt;code&gt;server: w1&lt;/code&gt; in the OWFS configuration File (/etc/owfs.conf by default), you can chose the ports as you want for OWFSHTTP and OWServer, the configuration tool will setup OWFS if it can.&lt;/p&gt;

&lt;p&gt;To manually setup OWFS, use the option -owfs when starting up Elsinore&lt;/p&gt;

&lt;h1 id=&quot;cutoff-temperature&quot;&gt;Cutoff Temperature&lt;/h1&gt;
&lt;p&gt;After the &lt;a href=&quot;http://imgur.com/a/pwQVE&quot;&gt;incident&lt;/a&gt; I decided to add a cutoff temperature, in my case I have a temperature probe on my SSRs, and when they go over a certain temperature I want to kill the server so it doesn’t get badly damaged&lt;/p&gt;

&lt;p&gt;This is to come in the updated Web UI setup.&lt;/p&gt;

&lt;h1 id=&quot;system-temperature&quot;&gt;System Temperature&lt;/h1&gt;

&lt;p&gt;System can be enabled during setup by entering “system” (no quotes) at the prompt.&lt;/p&gt;

&lt;p&gt;Also, to enable the System Temperature reading, please add&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;system /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;&amp;lt;general&amp;gt;&lt;/code&gt; section of the configuration file.&lt;/p&gt;

&lt;h1 id=&quot;timers&quot;&gt;Timers&lt;/h1&gt;

&lt;p&gt;Use the web UI, click on “Add Timer” to create a timer.&lt;/p&gt;

&lt;h1 id=&quot;pump-control&quot;&gt;Pump Control&lt;/h1&gt;

&lt;p&gt;To add a pump, use the “Add Pump” button on the Web Interface&lt;/p&gt;

&lt;h1 id=&quot;config-file&quot;&gt;Config File&lt;/h1&gt;

&lt;p&gt;This is now automatically controlled, you shouldn’t need to do anything to it, except for backing it up.&lt;/p&gt;

&lt;h1 id=&quot;control-interface&quot;&gt;Control Interface&lt;/h1&gt;

&lt;p&gt;Visit 
&lt;code&gt;
&amp;lt;ip of your system&amp;gt;:8080/controller
&lt;/code&gt;
to access the webUI, which works on mobiles too:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/j59BcFZ.png&quot; alt=&quot;Browser Layout&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://imgur.com/a/jEIbc&quot;&gt;Album of the UI Progress&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an example of the PID control interface, temperature probes are displayed on the right hand side as LCD displays. On the Raspberry Pi you’ll also get the system temperature (this isn’t enabled on Beagleboard yet)&lt;/p&gt;

&lt;p&gt;There is also a Android Application which is not currently in development, search my repositories to check this, but it’s not deprecated yet, I haven’t changed the JSON output from the system so it should continue to work.&lt;/p&gt;

&lt;p&gt;Thanks For reading this, if you have any queries please contact me or file a bug.&lt;/p&gt;
</description>
                <link>http://dougedey.github.io/elsinore/setup/instructions/beaglebone/raspberrypi/2014/05/14/New-Elsinore_Setup</link>
                <guid>http://dougedey.github.io/elsinore/setup/instructions/beaglebone/raspberrypi/2014/05/14/New-Elsinore_Setup</guid>
                <pubDate>2014-05-14T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Mash Profiles</title>
                <description>&lt;p&gt;So I have spent a week getting &lt;strong&gt;Mash Profiles&lt;/strong&gt; working in &lt;a href=&quot;http://dougedey.github.io/SB_Elsinore_Server/&quot;&gt;StrangeBrew Elsinore&lt;/a&gt;, it’s at a point now where I feel comfortable allowing other people to &lt;strong&gt;TEST&lt;/strong&gt; this functionality (I don’t use it in my setup personally)&lt;/p&gt;

&lt;h1 id=&quot;this-is-a-test-feature&quot;&gt;This is a TEST Feature&lt;/h1&gt;

&lt;p&gt;If you see an issue, please raise a bug with as much information as possible. One line “This doesn’t work” won’t help me to fix it. Check the logs, this feature has lots of WARNING output (rather than info) until it’s been tested well enough to be part of the main branch.&lt;/p&gt;

&lt;h3 id=&quot;what-is-a-mash-profile&quot;&gt;What is a Mash Profile?&lt;/h3&gt;

&lt;p&gt;I know I’m probably not using the right phrase, but I figured it was catchy enough to refer to, and it gets the intent of the feature across.&lt;/p&gt;

&lt;p&gt;A Mash Profile is a series of Mash Steps, many Mash Steps equal one Mash Profile.&lt;/p&gt;

&lt;p&gt;In Elsinore, you can have a mash profile for each PID you have setup.&lt;/p&gt;

&lt;h3 id=&quot;ok-what-does-a-mash-profile-allow-me-to-do&quot;&gt;OK, what does a Mash Profile allow me to do?&lt;/h3&gt;

&lt;p&gt;The profile allows you to setup mash steps in advance, with target start temperatures, duration, and names, Elsinore then has a background thread for each Mash Profile that has been setup.&lt;/p&gt;

&lt;p&gt;What Elsinore does is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Checks to see if there’s an active mash step, if there’s not it doesn’t do anything, simple.A&lt;/li&gt;
  &lt;li&gt;Sets the target PID Temperature to that of the mash profile&lt;/li&gt;
  &lt;li&gt;Checks to see if the current temperature on the profiles PID to see if it’s in range of the target profile (currently this is hard set to +/-2F, but this is next on my list to make flexible)&lt;/li&gt;
  &lt;li&gt;If it’s within the target range, it will then activate the mash step and set the start time, whilst at the same time setting the target end time&lt;/li&gt;
  &lt;li&gt;If the end time has been hit, or surpassed, the actual end time is recorded (up to 10s difference)&lt;/li&gt;
  &lt;li&gt;If there’s another mash step, this becomes the active step&lt;/li&gt;
  &lt;li&gt;Goto (1)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;sweet-its-like-a-set-and-forget-thing&quot;&gt;Sweet, it’s like a set and forget thing!&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;No&lt;/strong&gt;, seriously it’s not, you need to monitor everything closesly, as I said at the beginning, I don’t use this feature (at the moment) so it’s difficult for me to detect any issues.&lt;/p&gt;

&lt;p&gt;Also, whilst Elsinore does set the Target Temperature, it does NOT activate the element by itself. If a PID is already on manual, it will not move it to Auto, or Off. I don’t want to active an element when someone hasn’t put their water in, or something isn’t right!&lt;/p&gt;

&lt;h3 id=&quot;ok-i-get-it-i-think-i-want-to-use-this&quot;&gt;OK, I get it, I think I want to use this.&lt;/h3&gt;

&lt;p&gt;Cool, I like you already. But this isn’t something you can do with Elsinore by itself.&lt;/p&gt;

&lt;p&gt;You’ll need to use &lt;a href=&quot;http://dougedey.github.io/StrangeBrewQT/&quot;&gt;StrangeBrewQT&lt;/a&gt; to use this feature.&lt;/p&gt;

&lt;p&gt;When you get StrangeBrewQT, you can build it from source (install QTCreator and hit build, it should work on all platforms), using the &lt;em&gt;elsinore_mash&lt;/em&gt; branch. There’s a post &lt;strong&gt;TO_COME&lt;/strong&gt; with links to binary drops for Mac/Windows/Linux as standalone archives. Sorry, I don’t have an automated build system for all of this yet.&lt;/p&gt;

&lt;p&gt;Well, I lie a bit, you can get the Ubuntu release from &lt;a href=&quot;https://github.com/DougEdey/StrangeBrewQT/tree/master/drops&quot;&gt;this directory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you have your recipe and mash profile setup in StrangeBrewQT, under the tools item there’s a “Send Mash” option under “Tools”, this will attempt to send the mash profile to the Elsinore Server you have setup under Preferences-&amp;gt;Brewer.&lt;/p&gt;

&lt;p&gt;You’ll get relevant messages for any issues that StrangeBrew finds when trying to update the mash Profile, and then a message for the profile being sent&lt;/p&gt;

&lt;p&gt;You will see a prompt to select the relevant PID that you want to acivate the mash profile for. &lt;/p&gt;

&lt;p&gt;If there’s a profile already active, you can override it!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/DougEdey/dougedey.github.io/master/assets/images/mash_profiles/elsinore_on.png&quot; alt=&quot;Elsinore on&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/DougEdey/dougedey.github.io/master/assets/images/mash_profiles/SB_Mash.png&quot; alt=&quot;Elsinore Support&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/DougEdey/dougedey.github.io/master/assets/images/mash_profiles/to_elsinore.png&quot; alt=&quot;Elsinore Sent&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;its-sent-what-next&quot;&gt;It’s Sent! What next?&lt;/h3&gt;

&lt;p&gt;In the Web interface, the relevant PID will show a table of the mash steps, by default none are activated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/DougEdey/dougedey.github.io/master/assets/images/mash_profiles/mashstep_activate.png&quot; alt=&quot;Mashstep View&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So you’ll need to click the “Activate” button when you’re setup to go. Then press “Auto” on the PID to activate the element.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/DougEdey/dougedey.github.io/master/assets/images/mash_profiles/mashstep_enabled.png&quot; alt=&quot;Mashstep Active&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the PID temperature is within the target range, +/-2F by default, the timer will start&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/DougEdey/dougedey.github.io/master/assets/images/mash_profiles/timersmash.png&quot; alt=&quot;Mashstep Timer&quot; /&gt;&lt;/p&gt;
</description>
                <link>http://dougedey.github.io/strangebrew/elsinore/mash/instructions/strangebrewqt/2014/04/05/Elsinore-Mash-Profiles</link>
                <guid>http://dougedey.github.io/strangebrew/elsinore/mash/instructions/strangebrewqt/2014/04/05/Elsinore-Mash-Profiles</guid>
                <pubDate>2014-04-05T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Raspberry Pi Setup</title>
                <description>&lt;p&gt;The &lt;a href=&quot;http://www.raspberrypi.org/&quot;&gt;RaspberryPi&lt;/a&gt; is a $35 computer which works well as a brewery base&lt;/p&gt;

&lt;h3 id=&quot;example-wiring-diagram&quot;&gt;Example Wiring Diagram&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;It is highly recommended you setup a KILL SWITCH that will terminate the negative and/or the positive to the SSRs. This is a safety feature and allows you to kill the SSRs without going through the UI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an example circuit (which I currently use) In this example, for RaspberryPi, Pin 4 MUST be reserved for the one wire circuit, and there’s a 4k7 pullup resistor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/DougEdey/SB_Elsinore_Server/master/img/rpi_circuit.png&quot; alt=&quot;Circuit Diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this example, I have two SSRs connected to the GPIO Pin 11 and one connected to GPIO 10 (this is just an example).&lt;/p&gt;

&lt;p&gt;Previous versions of this application used WiringPi pinout, this has changed, if you’re unsure what version you have, the Software will walk you through the setup on first run, and you can remove/change the name of rpibrew.cfg to restart the setup process.&lt;/p&gt;

&lt;h3 id=&quot;gpio-naming&quot;&gt;GPIO Naming&lt;/h3&gt;

&lt;p&gt;The Pinout number is obviously different between RaspberryPi and Beaglebone.&lt;/p&gt;

&lt;p&gt;For RPi pinout: http://elinux.org/RPi_Low-level_peripherals&lt;/p&gt;

&lt;p&gt;RPi numbering is displayed in the setup utility on first startup.&lt;/p&gt;

&lt;p&gt;For RPi, you’ll want to use GPIO[X] where X is the pin number. &lt;/p&gt;

&lt;h3 id=&quot;setup-kernel-modules&quot;&gt;Setup Kernel Modules&lt;/h3&gt;

&lt;p&gt;The RaspberryPi requires some kernel modules to be installed, you may not need these if you use OWFS, I’m unable to test but would like feedback…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
sudo modprobe w1-gpio
sudo modprobe w1-therm
&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;If you do not use OWFS, you cannot use anything except for temperature probes on the one-wire bus&lt;/p&gt;
</description>
                <link>http://dougedey.github.io/instructions/elsinore/brewery/raspberrypi/setup/2014/03/22/RaspberryPi-Setup</link>
                <guid>http://dougedey.github.io/instructions/elsinore/brewery/raspberrypi/setup/2014/03/22/RaspberryPi-Setup</guid>
                <pubDate>2014-03-22T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Raspberry Pi Basic Setup for StrangeBrew Elsinore</title>
                <description>&lt;p&gt;This is very kindly provided by &lt;a href=&quot;http://www.homebrewtalk.com/f170/raspberry-pi-strangebrew-elsinore-basic-setup-463590/&quot;&gt;HBT User Cank&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;setup-the-operating-system&quot;&gt;Setup the Operating System&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.raspberrypi.org/downloads&quot;&gt;Download and install latest NOOBS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install Raspbian Operating system and set it up based on your location.&lt;/p&gt;

&lt;h3 id=&quot;setup-the-hardware&quot;&gt;Setup the Hardware&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cl.cam.ac.uk/projects/raspberrypi/tutorials/temperature/&quot;&gt;Set up your DS18 probes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then run this code in the LXTerminal to automatically load the One-Wire modules on start up&lt;/p&gt;

&lt;p&gt;Open /etc/modules to edit&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo nano /etc/modules
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add these lines to the bottom of the file /etc/modules&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;w1-gpio
w1-therm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then reboot&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;download-elsinore&quot;&gt;Download Elsinore&lt;/h3&gt;

&lt;p&gt;Download the SB_Elsinore_Server from git&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/DougEdey/SB_Elsinore_Server.git ~/BrewServer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Switch directories&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/BrewServer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run Elsinore&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo java -jar Elsinore.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;choosing-the-gpio-pins&quot;&gt;Choosing the GPIO Pins&lt;/h3&gt;
&lt;p&gt;See this &lt;a href=&quot;http://www.homebrewtalk.com/f170/raspberry-pi-strangebrew-elsinore-basic-setup-463590/index3.html#post5986888&quot;&gt;post&lt;/a&gt; to make sure you use the correct GPIO pins for output and you don’t choose one that is in the default HIGH state when the Pi boots up!!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is highly recommended you setup a KILL SWITCH that will terminate the negative and/or the positive to the SSRs. This is a safety feature and allows you to kill the SSRs without going through the UI&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;first-time-setup&quot;&gt;First time setup&lt;/h3&gt;

&lt;p&gt;It will run some lines of code then show a list of your sensors and ask you to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Select the input, enter &quot;r&quot; to refresh, or use &quot;pump &amp;amp;ltname&amp;amp;gt &amp;amp;ltgpio&amp;amp;gt&quot; to add a pump
Type &quot;volume&quot; to start volume calibration
Type &quot;timer &amp;amp;ltname&amp;amp;gt&quot; to add a timer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.homebrewtalk.com/attachments/f170/183770d1394036656-raspberry-pi-strangebrew-elsinore-basic-setup-elsinoresetup1.jpg&quot; alt=&quot;Initial Setup&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;some-errors&quot;&gt;Some errors&lt;/h3&gt;

&lt;p&gt;If you see&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;java.net.ConnectException: Connection refused&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means Elsinore is looking for OWFS (the full stacktrace will have OWFS in it) and OWFS isn’t enabled on your system. There was a bug that caused this after restarting Elsinore. This has been &lt;a href=&quot;https://github.com/DougEdey/SB_Elsinore_Server/commit/443ad3b69d6100db73b2afe9af37d749e3b4a860&quot;&gt;fixed&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you get an error at this point saying it can’t see your sensor check out this &lt;a href=&quot;http://www.homebrewtalk.com/f170/raspberry-pi-strangebrew-elsinore-basic-setup-463590/#post5969791&quot;&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It might ask you about switching to OWFS. Say No.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-the-system&quot;&gt;Setting up the System&lt;/h3&gt;

&lt;p&gt;At this point enter the number of the sensor you want to set up and hit enter. (I only had one so I entered “1” and hit enter.
It will ask you to name it. (I named mine “HLT”)
Then it ask you what GPIO output the SSR is hooked up to so it knows which pin to turn on and off based on the Temperature reading or your sensor. 
I used “GPIO27” which is pin 13
If you just want a temperature reading, say for mash tun or cooled wort, leave it blank and hit enter.
I then typed&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;timer Mash
timer Boil
pump Pump1 GPIO22

quit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.homebrewtalk.com/attachments/f170/183771d1394036656-raspberry-pi-strangebrew-elsinore-basic-setup-elsinoresetup2.jpg&quot; alt=&quot;Setup an output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It will tell you:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Updating config file, please check it in elsinore.cfg.new
Config file updated. Please copy it from rpibrew.cfg.new to rpibrew.cfg to use the data
You may need to do this as root
Saving HLT with probe 28-00000XXXXXX
Creating element of general
Creating on configDoc base
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;copying-the-config-file&quot;&gt;Copying the config file&lt;/h3&gt;

&lt;p&gt;If it didn’t create this last file, type this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp elsinore.cfg.new elsinore.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;running-and-using-elsinore&quot;&gt;Running and using Elsinore&lt;/h3&gt;

&lt;p&gt;Then run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo java -jar Elsinore.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and in a web browser go to the Raspberry Pi IP address&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;192.168.1.XX:8080/controller
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see:
&lt;img src=&quot;http://cdn.homebrewtalk.com/attachments/f170/183772d1394036656-raspberry-pi-strangebrew-elsinore-basic-setup-elsinore3.jpg&quot; alt=&quot;Web Interface&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;stopping-elsinore&quot;&gt;Stopping elsinore&lt;/h3&gt;

&lt;p&gt;Stops the application&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ctrl-C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last photo is of a breadboard that I have leds hooked to my gpio output pins for the pump(green led) and the HLT ssr(white led) when I turn the pump on the green light comes on, when I send a command for the HLT it turns the white led on based on duty cycle.
Pretty sweet!!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.homebrewtalk.com/attachments/f170/183773d1394036656-raspberry-pi-strangebrew-elsinore-basic-setup-img_4392-1-.jpg&quot; alt=&quot;Breadboard&quot; /&gt;&lt;/p&gt;
</description>
                <link>http://dougedey.github.io/elsinore/brewery/raspberrypi/cank/java/setup/instructions/2014/03/22/Raspberry-Pi-Basic-Setup</link>
                <guid>http://dougedey.github.io/elsinore/brewery/raspberrypi/cank/java/setup/instructions/2014/03/22/Raspberry-Pi-Basic-Setup</guid>
                <pubDate>2014-03-22T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>BeagleBone Black Setup</title>
                <description>&lt;p&gt;The &lt;a href=&quot;http://beagleboard.org/Products/BeagleBone+Black&quot;&gt;Beaglebone Black&lt;/a&gt; is similar to the Raspberry Pi, but with more GPIO and onboard Analogue in (that has a max of 1.8V)&lt;/p&gt;

&lt;h1 id=&quot;warning&quot;&gt;WARNING&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;It is highly recommended you setup a KILL SWITCH that will terminate the negative and/or the positive to the SSRs. This is a safety feature and allows you to kill the SSRs without going through the UI&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;launching&quot;&gt;Launching&lt;/h3&gt;

&lt;p&gt;You &lt;em&gt;must&lt;/em&gt; set the “Gpio_definitions” property on launch &lt;/p&gt;

&lt;p&gt;&lt;code&gt;java -Dgpio_definitions=extras/beaglebone.json -jar Elsinore.jar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Otherwise the system will error&lt;/p&gt;

&lt;h3 id=&quot;gpio-naming&quot;&gt;GPIO Naming&lt;/h3&gt;

&lt;p&gt;The Pinout number is different between RaspberryPi and Beaglebone.&lt;/p&gt;

&lt;p&gt;For Beagleboard Black Pinout: http://elinux.org/BeagleBone#P9_and_P8_-_Each_2x23_pins&lt;/p&gt;

&lt;p&gt;BeagleboardBlack has multiple banks, for example GPIO2_2, this translates to physical pin 66, banks are separated by 32 outputs per bank. &lt;/p&gt;

&lt;h3 id=&quot;overlays&quot;&gt;Overlays&lt;/h3&gt;

&lt;p&gt;For beagleboard to get OneWire support, and GPIO control, you need to install a Device Tree Overlay file. I have added these under the support directory:&lt;/p&gt;

&lt;p&gt;To compile the overlay: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo dtc -O dtb -o /lib/firmware/w1-00A0.dtbo -b 0 -@ w1.dts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or copy the w1-00A0.dtbo in the support directory to /lib/firmware (as root), the above command copies the file for you.&lt;/p&gt;

&lt;p&gt;Login as root (such as “sudo su”) and run &lt;/p&gt;

&lt;p&gt;&lt;code&gt;echo w1 &amp;gt; /sys/devices/bone_capemgr.8/slots&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note: bone_capemgr.8 may be bone.capemgr.9 depending on your setup&lt;/p&gt;

&lt;p&gt;I have also provided a sample jGPIO created overlay for GPIO0_7 as a pinout (jgpio-00A0.dtbo) which can be used in the same was as above&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo cp extras/jgpio-00A0.dtbo /lib/firmware/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;echo jgpio &amp;gt; /sys/devices/bone_capemgr.8/slots&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;jgpio&quot;&gt;jGPIO&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://dougedey.github.io/jGPIO/&quot;&gt;jGPIO&lt;/a&gt; is a Java application I made to generate the Device Tree Overlays based on a JSON configuration file. At the time of writing this affects Linux Kernel 3.8 and above. The raspberry Pi doesn’t support Kernel 3.8 yet.&lt;/p&gt;

&lt;h3 id=&quot;creating-a-custom-overlay&quot;&gt;Creating a custom Overlay&lt;/h3&gt;

&lt;p&gt;If you want to create a DTC file for custom GPIO pinout, you can read the instructions in the &lt;a href=&quot;https://github.com/DougEdey/jGPIO&quot;&gt;jGPIO&lt;/a&gt; repository&lt;/p&gt;

&lt;p&gt;But the synopsis is&lt;/p&gt;

&lt;p&gt;&lt;code&gt;java -cp Elsinore.jar -Dgpio_definition=extras/beaglebone.json jGPIO.DTOTest &amp;lt;List of GPIO pins&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For example&lt;/p&gt;

&lt;p&gt;&lt;code&gt;java -cp Elsinore.jar -Dgpio_definition=extras/beaglebone.json jGPIO.DTOTest GPIO0_7&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Will recreate the default GPIO0_7 file as jGPIO-00A0.dto, you will then need to compile this as the same as above but for jgpio&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo dtc -O dtb -o /lib/firmware/jgpio-00A0.dtbo -b 0 -@ jgpio-00A0.dto&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;analogue-inputs&quot;&gt;Analogue inputs&lt;/h3&gt;

&lt;p&gt;There is already a precompiled AIN DTO for the Beaglebone Black, BB-ADC, as above:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;echo BB-ADC &amp;gt; /sys/devices/bone_capemgr.8/slots&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To Activate them.&lt;/p&gt;

</description>
                <link>http://dougedey.github.io/elsinore/brewery/beaglebone/java/setup/instructions/2014/03/22/BeagleBoneBlack-Setup</link>
                <guid>http://dougedey.github.io/elsinore/brewery/beaglebone/java/setup/instructions/2014/03/22/BeagleBoneBlack-Setup</guid>
                <pubDate>2014-03-22T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>StrangeBrew Elsinore</title>
                <description>
&lt;h1 id=&quot;strangebrew-elsinore-server&quot;&gt;Strangebrew Elsinore Server&lt;/h1&gt;

&lt;p&gt;Java Server for Strangebrew Elsinore&lt;/p&gt;

&lt;p&gt;The purpose of this project is to create a Java application that can run on small systems such as the RaspberryPi and the Beaglebone series&lt;/p&gt;

&lt;p&gt;Since these systems run on Linux, that is a requirement to using this.&lt;/p&gt;

&lt;p&gt;The system is based off the Dallas One Wire protocol for the temperature probes (expanding to analogue inputs too), and Straightforward GPIO outputs for SSR control&lt;/p&gt;

&lt;h1 id=&quot;special-thanks&quot;&gt;Special Thanks&lt;/h1&gt;
&lt;p&gt;There’s a few people, without whom this project wouldn’t have gotten this far.&lt;br /&gt;
&lt;a href=&quot;https://www.linkedin.com/profile/view?id=5238387&amp;amp;authType=NAME_SEARCH&amp;amp;authToken=yppS&amp;amp;locale=en_US&amp;amp;trk=tyah2&amp;amp;trkInfo=tarId%3A1409619104393%2Ctas%3Abeadman%2Cidx%3A1-1-1&quot;&gt;Barry Beadman&lt;/a&gt; who came up with the original concept and helped me with the electronic parts of Elsinore at the beginning&lt;br /&gt;
&lt;a href=&quot;https://www.linkedin.com/profile/view?id=8804165&amp;amp;authType=NAME_SEARCH&amp;amp;authToken=rF5W&amp;amp;locale=en_US&amp;amp;srchid=599347131409619316778&amp;amp;srchindex=1&amp;amp;srchtotal=14&amp;amp;trk=vsrp_people_res_name&amp;amp;trkInfo=VSRPsearchId%3A599347131409619316778%2CVSRPtargetId%3A8804165%2CVSRPcmpt%3Aprimary&quot;&gt;Drew Avis&lt;/a&gt; Who allowed me to take over StrangeBrew Java.&lt;br /&gt;
&lt;a href=&quot;http://www.homebrewtalk.com/members/jangevaa&quot;&gt;Jangeeva&lt;/a&gt; who provided a lot of debugging help with various issues.&lt;br /&gt;
&lt;a href=&quot;http://www.homebrewtalk.com/f170/new-strangebrew-elsinore-thread-475456&quot;&gt;HomeBrewTalk Forums&lt;/a&gt; for ongoing support over the time of the project.  &lt;/p&gt;

&lt;h1 id=&quot;setup-instructions&quot;&gt;Setup Instructions&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;extras/BeagleboneBlackSetup.md&quot;&gt;Beaglebone Black&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;extras/RaspberryPiSetup.md&quot;&gt;RaspberryPi&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;startup-instructions&quot;&gt;Startup Instructions&lt;/h1&gt;

&lt;p&gt;Clone this repository:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone https://github.com/DougEdey/SB_Elsinore_Server&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Move to the checked out Directory:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd SB_Elsinore_Server&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;java -jar Elsinore.jar [options ]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To startup the setup procedure, I am aware that it needs to be improved, if you have any suggestions, please raise a bug
Use -help to show the full list of options.&lt;/p&gt;

&lt;p&gt;Then check the config file if you want to, then you can copy the new one to the default name&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cp rpibrew.cfg.new rpibrew.cfg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And rerun Elsinore to get started&lt;/p&gt;

&lt;p&gt;&lt;code&gt;java -jar Elsinore.jar [options]&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;raspberrypi-or-beagleboard&quot;&gt;RaspberryPi or Beagleboard?&lt;/h1&gt;

&lt;p&gt;The BeagleBoard Black does have a big advantage over the RPi, it has onboard analogue inputs, but these are 1.8V.&lt;/p&gt;

&lt;p&gt;The RaspberryPi works fine with the existing software, the only thing you need to do differently is naming the GPIO Pinouts.&lt;/p&gt;

&lt;h1 id=&quot;pump-control&quot;&gt;Pump Control&lt;/h1&gt;

&lt;p&gt;Elsinore now supports pumps, you’ll need to add a new section called “pumps” and each pump must be on it’s own line in the form 
&lt;code&gt;name=gpio&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The buttons will be RED when on, and GRAY when off. &lt;/p&gt;

&lt;h1 id=&quot;one-wire--owfs&quot;&gt;One Wire &amp;amp; OWFS&lt;/h1&gt;
&lt;p&gt;One Wire is fantastic (in my opinion) each sensor or device has a full 64 bit address, and you don’t have to worry about the order and you can chain them!&lt;/p&gt;

&lt;p&gt;One Wire devices can be chained, with only one Pullup resistor before the first connection to a device. I currently have 4 Temperature probes on my circuit, and a ADC, connected using XLR jacks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://owfs.org/&quot;&gt;OWFS&lt;/a&gt; is a much better One Wire Implementation, it is highly recommended to install it, and it is REQUIRED if you use One Wire based Analog inputs (like the DS2450&lt;/p&gt;

&lt;p&gt;Install it using your standard package manager, then you need to set a mountpoint up (I use /mnt/1wire) and set &lt;/p&gt;

&lt;p&gt;&lt;code&gt;server: w1&lt;/code&gt; in the OWFS configuration File (/etc/owfs.conf by default), you can chose the ports as you want for OWFSHTTP and OWServer, the configuration tool will setup OWFS if it can.&lt;/p&gt;

&lt;p&gt;To manually setup OWFS, use the option -owfs when starting up Elsinore&lt;/p&gt;

&lt;h1 id=&quot;cutoff-temperature&quot;&gt;Cutoff Temperature&lt;/h1&gt;
&lt;p&gt;After the &lt;a href=&quot;http://imgur.com/a/pwQVE&quot;&gt;incident&lt;/a&gt; I decided to add a cutoff temperature, in my case I have a temperature probe on my SSRs, and when they go over a certain temperature I want to kill the server so it doesn’t get badly damaged&lt;/p&gt;

&lt;p&gt;Adding 
&lt;code&gt;cutoff = &amp;lt;string&amp;gt;&lt;/code&gt;
To any of the devices, will kill Elsinore when the temperature for that device goes above it.&lt;/p&gt;

&lt;p&gt;The String is in the form: &lt;code&gt;&amp;lt;number&amp;gt;&amp;lt;scale&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So in the config file below, I can use 85C as a cutoff temperature and it’ll turn off when it goes above 85C&lt;/p&gt;

&lt;h1 id=&quot;system-temperature&quot;&gt;System Temperature&lt;/h1&gt;

&lt;p&gt;System can be enabled during setup by entering “system” (no quotes) at the prompt.&lt;/p&gt;

&lt;p&gt;Also, to enable the System Temperature reading, please add&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;system /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;&amp;lt;general&amp;gt;&lt;/code&gt; section of the configuration file.&lt;/p&gt;

&lt;h1 id=&quot;timers&quot;&gt;Timers&lt;/h1&gt;

&lt;p&gt;During setup you can add custom timers, just use:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
timer &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;At the command prompt, if you don’t enter a name it will prompt you for one.&lt;/p&gt;

&lt;h1 id=&quot;config-file&quot;&gt;Config File&lt;/h1&gt;

&lt;p&gt;This config file will automatically be parsed and converted to an XML file &lt;/p&gt;

&lt;p&gt;```
[general]
scale = F
#cosm = COSM API KEY
#cosm_feed = YOUR COSM FEED&lt;/p&gt;

&lt;p&gt;[kettle]
set_point = 168.0
duty_cycle = 100.0
cycle_time = 2.0
k_param = 41.0
i_param = 169.0
d_param = 4.0
probe = 28-0000032c449f
gpio = GPIO2_1&lt;/p&gt;

&lt;p&gt;[mlt]
set_point = 0.0
duty_cycle = 0.0
cycle_time = 2.0
k_param = 44.0
i_param = 165.0
d_param = 4.0
probe = 28-0000032c506e
gpio = &lt;/p&gt;

&lt;p&gt;[pumps]
pump_a = GPIO0_8
pump_foo = GPIO0_9
```&lt;/p&gt;

&lt;p&gt;This is a sample Setup file, you can see I have two devices setup here, the MLT is a “read only” probe that doesn’t have a GPIO associated. Whereas the Kettle is setup with default PID values, and has a GPIO pinout of GPIO2_1.&lt;/p&gt;

&lt;p&gt;The scale can be changed between C or F to use Celsius or Fahrenheit on the system.&lt;/p&gt;

&lt;h1 id=&quot;control-interface&quot;&gt;Control Interface&lt;/h1&gt;

&lt;p&gt;Visit 
&lt;code&gt;
&amp;lt;ip of your system&amp;gt;:8080/controller
&lt;/code&gt;
to access the webUI, which works on mobiles too:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/j59BcFZ.png&quot; alt=&quot;Browser Layout&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://imgur.com/a/jEIbc&quot;&gt;Album of the UI Progress&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an example of the PID control interface, temperature probes are displayed on the right hand side as LCD displays. On the Raspberry Pi you’ll also get the system temperature (this isn’t enabled on Beagleboard yet)&lt;/p&gt;

&lt;p&gt;There is also a Android Application which is not currently in development, search my repositories to check this, but it’s not deprecated yet, I haven’t changed the JSON output from the system so it should continue to work.&lt;/p&gt;

&lt;p&gt;Thanks For reading this, if you have any queries please contact me or file a bug.&lt;/p&gt;
</description>
                <link>http://dougedey.github.io/elsinore/java/strangebrew/brewery/beer/controller/2014/03/21/sb-elsinore</link>
                <guid>http://dougedey.github.io/elsinore/java/strangebrew/brewery/beer/controller/2014/03/21/sb-elsinore</guid>
                <pubDate>2014-03-21T00:00:00-04:00</pubDate>
        </item>


</channel>
</rss>
